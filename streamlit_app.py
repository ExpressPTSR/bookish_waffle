# streamlit_app.py
import streamlit as st
from utils.parser import parse_natural_language
from utils.generator import generate_grc_xml

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏ –≤ GRC",
    page_icon="üìª",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó
if 'parsed_data' not in st.session_state:
    st.session_state['parsed_data'] = None
if 'grc_xml' not in st.session_state:
    st.session_state['grc_xml'] = None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def process_input(text_input):
    # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É
    with st.spinner("–ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –∑–∞–ø–∏—Ç..."):
        try:
            # –ê–Ω–∞–ª—ñ–∑ –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏
            parsed_data = parse_natural_language(text_input)
            st.session_state['parsed_data'] = parsed_data
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è GRC XML
            grc_xml = generate_grc_xml(parsed_data)
            st.session_state['grc_xml'] = grc_xml
            
            return True
        except Exception as e:
            st.error(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏: {str(e)}")
            return False

# –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ø—Ä–∏—Ä–æ–¥–Ω–æ—ó –º–æ–≤–∏ –≤ GRC –ø–æ—Ç–æ–∫–æ–≤—ñ –≥—Ä–∞—Ñ—ñ–∫–∏")
    
    # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
    with st.sidebar:
        st.header("–ü—Ä–æ –¥–æ–¥–∞—Ç–æ–∫")
        st.info("""
        –¶–µ–π –¥–æ–¥–∞—Ç–æ–∫ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –æ–ø–∏—Å–∏, –Ω–∞–ø–∏—Å–∞–Ω—ñ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é, —É –ø–æ—Ç–æ–∫–æ–≤—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ GNU Radio Companion (.grc —Ñ–æ—Ä–º–∞—Ç).
        
        –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à—ñ—Ç—å, —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏, —ñ —Å–∏—Å—Ç–µ–º–∞ –∑–≥–µ–Ω–µ—Ä—É—î –ø–æ–≤–Ω–∏–π GRC —Ñ–∞–π–ª –¥–ª—è –≤–∞—Å.
        """)
        
        st.header("–ü—Ä–∏–∫–ª–∞–¥–∏")
        st.markdown("""
        –°–ø—Ä–æ–±—É–π—Ç–µ —Ü—ñ –ø—Ä–∏–∫–ª–∞–¥–∏:
        1. "–°—Ç–≤–æ—Ä–∏ FM-—Ä–∞–¥—ñ–æ–ø—Ä–∏–π–º–∞—á –Ω–∞ 100 –ú–ì—Ü –∑ —à–∏—Ä–∏–Ω–æ—é —Å–º—É–≥–∏ 200 –∫–ì—Ü"
        2. "–ü–æ–±—É–¥—É–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —Å–ø–µ–∫—Ç—Ä—É –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É 430-440 –ú–ì—Ü"
        3. "–ó—Ä–æ–±–∏ GSM –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ —ñ–∑ –∑–∞–ø–∏—Å–æ–º —É —Ñ–∞–π–ª"
        """)
    
    # –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ–º–æ–≤–Ω–æ–≥–æ –æ–ø–∏—Å—É
    text_input = st.text_area(
        "–û–ø–∏—à—ñ—Ç—å –ø–æ—Ç–æ–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏:", 
        height=100,
        placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –°—Ç–≤–æ—Ä–∏ FM-—Ä–∞–¥—ñ–æ–ø—Ä–∏–π–º–∞—á –Ω–∞ 100 –ú–ì—Ü –∑ –∞—É–¥—ñ–æ–≤–∏—Ö–æ–¥–æ–º —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Å–ø–µ–∫—Ç—Ä—É"
    )
    
    # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è
    col1, col2 = st.columns([1, 1])
    with col1:
        if st.button("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–æ—Ç–æ–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫", type="primary"):
            if text_input:
                success = process_input(text_input)
                if success:
                    st.success("–ü–æ—Ç–æ–∫–æ–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!")
            else:
                st.warning("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É.")
    
    with col2:
        if st.button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥", type="secondary"):
            examples = [
                "–°—Ç–≤–æ—Ä–∏ FM-—Ä–∞–¥—ñ–æ–ø—Ä–∏–π–º–∞—á –Ω–∞ 100 –ú–ì—Ü –∑ —à–∏—Ä–∏–Ω–æ—é —Å–º—É–≥–∏ 200 –∫–ì—Ü —Ç–∞ –∞—É–¥—ñ–æ–≤–∏—Ö–æ–¥–æ–º",
                "–ü–æ–±—É–¥—É–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —Å–ø–µ–∫—Ç—Ä—É –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É 430-440 –ú–ì—Ü",
                "–ù–∞–ª–∞—à—Ç—É–π –≤—ñ–π—Å—å–∫–æ–≤–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª—ñ–≤ —ñ–∑ –∑–∞–ø–∏—Å–æ–º —É —Ñ–∞–π–ª detected_signals.dat"
            ]
            import random
            selected_example = random.choice(examples)
            st.session_state['example_text'] = selected_example
            st.experimental_rerun()
    
    # –Ø–∫—â–æ —î –æ–±—Ä–æ–±–ª–µ–Ω—ñ –¥–∞–Ω—ñ, –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    if 'parsed_data' in st.session_state and st.session_state['parsed_data']:
        parsed_data = st.session_state['parsed_data']
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏—è–≤–ª–µ–Ω—ñ –±–ª–æ–∫–∏
        st.subheader("–í–∏—è–≤–ª–µ–Ω—ñ –±–ª–æ–∫–∏")
        cols = st.columns(3)
        for i, block in enumerate(parsed_data["blocks"]):
            with cols[i % 3]:
                st.markdown(f"**{block['type']}** (`{block['id']}`)")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Ü—å–æ–≥–æ –±–ª–æ–∫—É
                if block["id"] in parsed_data["parameters"]:
                    params = parsed_data["parameters"][block["id"]]
                    for param_name, param_value in params.items():
                        st.caption(f"- {param_name}: {param_value}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
        st.subheader("–ó'—î–¥–Ω–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Ç–æ–∫—ñ–≤")
        for conn in parsed_data["connections"]:
            source_block = next((b for b in parsed_data["blocks"] if b["id"] == conn["source_block_id"]), None)
            sink_block = next((b for b in parsed_data["blocks"] if b["id"] == conn["sink_block_id"]), None)
            
            if source_block and sink_block:
                st.write(f"`{source_block['type']}` ‚Üí `{sink_block['type']}`")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π XML
        if 'grc_xml' in st.session_state and st.session_state['grc_xml']:
            st.subheader("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π GRC —Ñ–∞–π–ª")
            with st.expander("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ GRC XML"):
                st.code(st.session_state['grc_xml'], language="xml")
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–ª—è XML-—Ñ–∞–π–ª—É
            st.download_button(
                label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ GRC —Ñ–∞–π–ª",
                data=st.session_state['grc_xml'],
                file_name="generated_flowgraph.grc",
                mime="application/xml"
            )

if __name__ == "__main__":
    main()
